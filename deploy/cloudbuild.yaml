timeout: "3600s"
options:
  logging: CLOUD_LOGGING_ONLY

availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/TELEGRAM_BOT_TOKEN/versions/latest
      env: TELEGRAM_BOT_TOKEN
    - versionName: projects/$PROJECT_ID/secrets/TELEGRAM_CHAT_ID/versions/latest
      env: TELEGRAM_CHAT_ID
    - versionName: projects/$PROJECT_ID/secrets/OPENROUTER_API_KEY/versions/latest
      env: OPENROUTER_API_KEY

substitutions:
  _REGION: europe-west1
  _SERVICE: x-bot-mei
  _REPO: x-bot-mei
  _BUCKET_DB: xbot-473616-x-bot-mei-db
  _SHORT_SHA: manual
  _BRANCH: main

steps:
  # Commit metadata for notifications
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    id: commit-meta
    entrypoint: bash
    secretEnv: ["TELEGRAM_BOT_TOKEN", "TELEGRAM_CHAT_ID"]
    env: ["BRANCH_NAME=${_BRANCH}", "SHORT_SHA=${_SHORT_SHA}", "COMMIT_SHA=${_SHORT_SHA}"]
    args:
      - -ceu
      - |
        set -euo pipefail
        trap 'code=$?; echo "commit-meta failed ($code)"; bash ./deploy/scripts/notify_failure.sh "${_SERVICE}" "${_REGION}" "commit-meta"; exit $code' ERR
        bash ./deploy/scripts/commit_meta.sh

  # Notify start
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    id: notify-start
    entrypoint: bash
    secretEnv: ["TELEGRAM_BOT_TOKEN", "TELEGRAM_CHAT_ID"]
    env: ["BRANCH_NAME=${_BRANCH}", "SHORT_SHA=${_SHORT_SHA}", "COMMIT_SHA=${_SHORT_SHA}"]
    args: ["-ceu", "bash ./deploy/scripts/notify_start.sh ${_SERVICE} ${_REGION}"]

  # Build image
  - name: gcr.io/cloud-builders/docker
    id: docker-build
    entrypoint: bash
    env: ["SHORT_SHA=${_SHORT_SHA}", "COMMIT_SHA=${_SHORT_SHA}"]
    args:
      - -c
      - |
        TAG="$${SHORT_SHA:-$${COMMIT_SHA:-$${REVISION_ID:-manual}}}"
        IMG="${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO}/${_SERVICE}:$${TAG}"
        docker build -t "$$IMG" .

  # Push image
  - name: gcr.io/cloud-builders/docker
    id: docker-push
    entrypoint: bash
    env: ["SHORT_SHA=${_SHORT_SHA}", "COMMIT_SHA=${_SHORT_SHA}"]
    args:
      - -c
      - |
        TAG="$${SHORT_SHA:-$${COMMIT_SHA:-$${REVISION_ID:-manual}}}"
        IMG="${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO}/${_SERVICE}:$${TAG}"
        docker push "$$IMG"

  # Deploy to Cloud Run (CLI, no per-container resources)
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    entrypoint: bash
    secretEnv: ["TELEGRAM_BOT_TOKEN", "TELEGRAM_CHAT_ID"]
    env: ["BRANCH_NAME=${_BRANCH}", "SHORT_SHA=${_SHORT_SHA}", "COMMIT_SHA=${_SHORT_SHA}"]
    args:
      - -ceu
      - |
        set -euo pipefail
        trap 'code=$?; echo "deploy failed ($code)"; bash ./deploy/scripts/notify_failure.sh "${_SERVICE}" "${_REGION}" "gcloud-run-deploy"; exit $code' ERR

        gcloud config set project "$PROJECT_ID"
        TAG="$${SHORT_SHA:-$${COMMIT_SHA:-$${REVISION_ID:-manual}}}"
        IMG="${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO}/${_SERVICE}:$${TAG}"

        SECRET_LIST="TELEGRAM_BOT_TOKEN=TELEGRAM_BOT_TOKEN:latest,ADMIN_API_TOKEN=ADMIN_API_TOKEN:latest"
        if gcloud secrets describe OPENROUTER_API_KEY >/dev/null 2>&1; then
          SECRET_LIST="$$SECRET_LIST,OPENROUTER_API_KEY=OPENROUTER_API_KEY:latest"
        fi

        ENV_VARS="^~^CHROMA_DB_URL=http://34.14.34.69:8080~CHROMA_DB_PATH=/mnt/db~SHOW_TOPIC_ID=0~SUSPEND_GUARDRAILS=1~WARDEN_MINIMAL=0~POST_MODEL=x-ai/grok-4-fast~EMBED_MODEL=openai/text-embedding-3-large~UMBRAL_SIMILITUD=0.75~SIM_DIM=3072~TOPICS_COLLECTION=topics_collection_3072~UMBRAL_SIMILITUD_LINE=0.52~WARMUP_ANCHORS=200"

        gcloud run deploy "${_SERVICE}" \
          --region "${_REGION}" --allow-unauthenticated \
          --max-instances 1 --min-instances 0 \
          --image "$$IMG" \
          --port 8080 \
          --set-env-vars="$$ENV_VARS" \
          --set-secrets "$$SECRET_LIST" \
          --add-volume=name=dbvol,type=cloud-storage,bucket="${_BUCKET_DB}" \
          --add-volume-mount=volume=dbvol,mount-path=/mnt/db

        bash ./deploy/scripts/notify_success.sh "${_SERVICE}" "${_REGION}"

  # Ingest/re-embed goldset into Chroma with 3072-dim vectors
  - name: python:3.11-slim
    id: ingest-goldset
    entrypoint: bash
    secretEnv: ["OPENROUTER_API_KEY"]
    env: ["CHROMA_DB_URL=http://34.14.34.69:8080", "EMBED_MODEL=openai/text-embedding-3-large", "EMBED_DISABLE_CIRCUIT=1"]
    args:
      - -ceu
      - |
        set -euo pipefail
        pip install -r requirements.runtime.txt
        python - << 'PY'
        from embeddings_manager import get_chroma_client
        client = get_chroma_client()
        try:
            client.delete_collection(name="goldset_collection")
            print("Goldset collection deleted")
        except Exception as e:
            print("Warning: could not delete collection:", e)
        PY
        python scripts/ingest_goldset.py
