timeout: "1800s"
options:
  logging: CLOUD_LOGGING_ONLY

availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/TELEGRAM_BOT_TOKEN/versions/latest
      env: TELEGRAM_BOT_TOKEN
    - versionName: projects/$PROJECT_ID/secrets/TELEGRAM_CHAT_ID/versions/latest
      env: TELEGRAM_CHAT_ID

substitutions:
  _REGION: europe-west1
  _SERVICE: x-bot-mei
  _REPO: x-bot-mei
  # Ajusta el bucket existente con tu proyecto
  _BUCKET_DB: xbot-473616-x-bot-mei-db
  _FALLBACK_PROVIDER_ORDER: gemini,openrouter

steps:
  # Commit metadata for notifications (subject, author, branch)
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    id: commit-meta
    entrypoint: bash
    secretEnv: ["TELEGRAM_BOT_TOKEN", "TELEGRAM_CHAT_ID"]
    args:
      - -ceu
      - |
        set -euo pipefail
        trap 'code=$?; echo "commit-meta failed ($code)"; bash ./deploy/scripts/notify_failure.sh "${_SERVICE}" "${_REGION}" "commit-meta"; exit $code' ERR
        bash ./deploy/scripts/commit_meta.sh

  # Notify start to Telegram (lean + clean)
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    id: notify-start
    entrypoint: bash
    secretEnv: ["TELEGRAM_BOT_TOKEN", "TELEGRAM_CHAT_ID"]
    args: ["-ceu", "bash ./deploy/scripts/notify_start.sh ${_SERVICE} ${_REGION}"]

  # Build image
  - name: gcr.io/cloud-builders/docker
    id: docker-build
    entrypoint: bash
    secretEnv: ["TELEGRAM_BOT_TOKEN", "TELEGRAM_CHAT_ID"]
    args:
      - -ceu
      - |
        set -euo pipefail
        IMG="${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO}/${_SERVICE}:$SHORT_SHA"
        trap 'code=$?; echo "docker build failed ($code)"; bash ./deploy/scripts/notify_failure.sh "${_SERVICE}" "${_REGION}" "docker-build"; exit $code' ERR
        docker build -t "$IMG" .

  # Push image
  - name: gcr.io/cloud-builders/docker
    id: docker-push
    entrypoint: bash
    secretEnv: ["TELEGRAM_BOT_TOKEN", "TELEGRAM_CHAT_ID"]
    args:
      - -ceu
      - |
        set -euo pipefail
        IMG="${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO}/${_SERVICE}:$SHORT_SHA"
        trap 'code=$?; echo "docker push failed ($code)"; bash ./deploy/scripts/notify_failure.sh "${_SERVICE}" "${_REGION}" "docker-push"; exit $code' ERR
        docker push "$IMG"

  # Deploy to Cloud Run (idempotent). Requiere que los secretos existan.
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    entrypoint: bash
    secretEnv: ["TELEGRAM_BOT_TOKEN", "TELEGRAM_CHAT_ID"]
    args:
      - -ceu
      - |
        set -euo pipefail
        trap 'code=$?; echo "deploy failed ($code)"; bash ./deploy/scripts/notify_failure.sh "${_SERVICE}" "${_REGION}" "gcloud-run-deploy"; exit $code' ERR
        gcloud config set project "$PROJECT_ID"
        IMG="${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO}/${_SERVICE}:$SHORT_SHA"

        # Secret refs: no leen valores en build, solo referencian nombres/versions
        SECRET_LIST="TELEGRAM_BOT_TOKEN=TELEGRAM_BOT_TOKEN:latest,GOOGLE_API_KEY=GOOGLE_API_KEY:latest,ADMIN_API_TOKEN=ADMIN_API_TOKEN:latest"
        if gcloud secrets describe OPENROUTER_API_KEY >/dev/null 2>&1; then
          SECRET_LIST="$$SECRET_LIST,OPENROUTER_API_KEY=OPENROUTER_API_KEY:latest"
        fi

        # Escapar coma usando item-delimiter ^:^
        ENV_VARS="^:^FALLBACK_PROVIDER_ORDER=${_FALLBACK_PROVIDER_ORDER}:CHROMA_DB_PATH=/mnt/db:GEMINI_MODEL=gemini-2.5-pro:SHOW_TOPIC_ID=0"

        gcloud run deploy "${_SERVICE}" \
          --image "$$IMG" \
          --region "${_REGION}" --allow-unauthenticated --port 8080 \
          --max-instances 1 --min-instances 0 \
          --set-env-vars "$$ENV_VARS" \
          --set-secrets "$$SECRET_LIST" \
          --add-volume=name=dbvol,type=cloud-storage,bucket="${_BUCKET_DB}" \
          --add-volume-mount=volume=dbvol,mount-path=/mnt/db

        # Notify success to Telegram (with service URL)
        bash ./deploy/scripts/notify_success.sh "${_SERVICE}" "${_REGION}"

images:
  - "${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO}/${_SERVICE}:$SHORT_SHA"
