timeout: "3600s"
options:
  logging: CLOUD_LOGGING_ONLY

availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/TELEGRAM_BOT_TOKEN/versions/latest
      env: TELEGRAM_BOT_TOKEN
    - versionName: projects/$PROJECT_ID/secrets/TELEGRAM_CHAT_ID/versions/latest
      env: TELEGRAM_CHAT_ID

substitutions:
  _REGION: europe-west1
  _SERVICE: x-bot-mei
  _REPO: x-bot-mei
  _BUCKET_DB: xbot-473616-x-bot-mei-db
  _FALLBACK_PROVIDER_ORDER: ollama,gemini,openrouter
  _SHORT_SHA: manual
  _BRANCH: main

steps:
  # Commit metadata for notifications
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    id: commit-meta
    entrypoint: bash
    secretEnv: ["TELEGRAM_BOT_TOKEN", "TELEGRAM_CHAT_ID"]
    env: ["BRANCH_NAME=${_BRANCH}", "SHORT_SHA=${_SHORT_SHA}", "COMMIT_SHA=${_SHORT_SHA}"]
    args:
      - -ceu
      - |
        set -euo pipefail
        trap 'code=$?; echo "commit-meta failed ($code)"; bash ./deploy/scripts/notify_failure.sh "${_SERVICE}" "${_REGION}" "commit-meta"; exit $code' ERR
        bash ./deploy/scripts/commit_meta.sh

  # Notify start
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    id: notify-start
    entrypoint: bash
    secretEnv: ["TELEGRAM_BOT_TOKEN", "TELEGRAM_CHAT_ID"]
    env: ["BRANCH_NAME=${_BRANCH}", "SHORT_SHA=${_SHORT_SHA}", "COMMIT_SHA=${_SHORT_SHA}"]
    args: ["-ceu", "bash ./deploy/scripts/notify_start.sh ${_SERVICE} ${_REGION}"]

  # Build image
  - name: gcr.io/cloud-builders/docker
    id: docker-build
    entrypoint: bash
    env: ["SHORT_SHA=${_SHORT_SHA}", "COMMIT_SHA=${_SHORT_SHA}"]
    args:
      - -c
      - |
        TAG="$${SHORT_SHA:-$${COMMIT_SHA:-$${REVISION_ID:-manual}}}"
        IMG="${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO}/${_SERVICE}:$${TAG}"
        docker build -t "$$IMG" .

  # Push image
  - name: gcr.io/cloud-builders/docker
    id: docker-push
    entrypoint: bash
    env: ["SHORT_SHA=${_SHORT_SHA}", "COMMIT_SHA=${_SHORT_SHA}"]
    args:
      - -c
      - |
        TAG="$${SHORT_SHA:-$${COMMIT_SHA:-$${REVISION_ID:-manual}}}"
        IMG="${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO}/${_SERVICE}:$${TAG}"
        docker push "$$IMG"

  # Deploy to Cloud Run with Ollama Sidecar (declarative YAML)
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    entrypoint: bash
    secretEnv: ["TELEGRAM_BOT_TOKEN", "TELEGRAM_CHAT_ID"]
    env: ["BRANCH_NAME=${_BRANCH}", "SHORT_SHA=${_SHORT_SHA}", "COMMIT_SHA=${_SHORT_SHA}"]
    args:
      - -ceu
      - |
        set -euo pipefail
        trap 'code=$?; echo "deploy failed ($code)"; bash ./deploy/scripts/notify_failure.sh "${_SERVICE}" "${_REGION}" "gcloud-run-deploy"; exit $code' ERR

        gcloud config set project "$PROJECT_ID"
        TAG="$${SHORT_SHA:-$${COMMIT_SHA:-$${REVISION_ID:-manual}}}"
        IMG="${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPO}/${_SERVICE}:$${TAG}"

        # Optional OPENROUTER secret env block
        OPENROUTER_YAML=""
        if gcloud secrets describe OPENROUTER_API_KEY >/dev/null 2>&1; then
          OPENROUTER_YAML=$'- name: OPENROUTER_API_KEY\n          valueFrom:\n            secretKeyRef:\n              secret: OPENROUTER_API_KEY\n              version: latest'
        fi

        cat > service.yaml <<EOF
        apiVersion: serving.knative.dev/v1
        kind: Service
        metadata:
          name: ${_SERVICE}
        spec:
          template:
            metadata:
              annotations:
                run.googleapis.com/execution-environment: gen2
                autoscaling.knative.dev/minScale: "0"
                autoscaling.knative.dev/maxScale: "1"
            spec:
              volumes:
              - name: dbvol
                cloudStorage:
                  bucket: "${_BUCKET_DB}"
              containers:
              - name: app
                image: "$$IMG"
                ports:
                - containerPort: 8080
                env:
                - name: FALLBACK_PROVIDER_ORDER
                  value: "${_FALLBACK_PROVIDER_ORDER}"
                - name: CHROMA_DB_PATH
                  value: "/mnt/db"
                - name: GEMINI_MODEL
                  value: "gemini-1.5-pro-latest"
                - name: SHOW_TOPIC_ID
                  value: "0"
                - name: OLLAMA_HOST
                  value: "http://localhost:11434"
                - name: TELEGRAM_BOT_TOKEN
                  valueFrom:
                    secretKeyRef:
                      secret: TELEGRAM_BOT_TOKEN
                      version: latest
                - name: TELEGRAM_CHAT_ID
                  valueFrom:
                    secretKeyRef:
                      secret: TELEGRAM_CHAT_ID
                      version: latest
                - name: GOOGLE_API_KEY
                  valueFrom:
                    secretKeyRef:
                      secret: GOOGLE_API_KEY
                      version: latest
                - name: ADMIN_API_TOKEN
                  valueFrom:
                    secretKeyRef:
                      secret: ADMIN_API_TOKEN
                      version: latest
        $(printf "%s" "$$OPENROUTER_YAML" | sed 's/^/                /')
                volumeMounts:
                - name: dbvol
                  mountPath: /mnt/db
                resources:
                  limits:
                    cpu: "1"
                    memory: "1Gi"
              - name: ollama
                image: "ollama/ollama"
                resources:
                  limits:
                    cpu: "1"
                    memory: "2Gi"
        EOF

        # Apply service config and allow unauthenticated access
        gcloud run services replace service.yaml --region "${_REGION}"
        gcloud run services add-iam-policy-binding "${_SERVICE}" \
          --region "${_REGION}" \
          --member="allUsers" \
          --role="roles/run.invoker" || true

        bash ./deploy/scripts/notify_success.sh "${_SERVICE}" "${_REGION}"
